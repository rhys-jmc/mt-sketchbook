{"version":3,"sources":["constants.ts","components/Canvas.tsx","components/Modal.tsx","components/PageListItem.tsx","components/PageList.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["CANVAS_WIDTH","CANVAS_HEIGHT","Canvas","state","drawing","canvasRef","React","createRef","getCanvasContext","_this","current","getContext","handleMouseDown","_ref","pageX","pageY","_this$currentCanvasRe","currentCanvasRef","offsetLeft","offsetTop","context","setState","beginPath","moveTo","handleMouseMove","_ref2","_this$currentCanvasRe2","lineTo","stroke","handleMouseUp","closePath","props","onMouseUp","getImageData","imageData","_ref3","this","putImageData","react_default","a","createElement","width","height","ref","onMouseDown","onMouseMove","Component","Modal","open","handleKeyUp","ev","key","closeModal","openModal","callback","document","addEventListener","removeEventListener","_this2","Fragment","render","className","style","display","onClick","event","stopPropagation","children","components_PageListItem","isActive","label","classnames","disabled","components_PageList","activePageId","onPageClick","pages","map","id","App","newPage","inputRef","handleChange","name","value","target","prevState","Object","objectSpread","defineProperty","objectWithoutProperties","index","newPages","concat","toConsumableArray","slice","handleNewPageClick","focus","handlePageClick","handleSubmit","preventDefault","lastPage","length","ImageData","Modal_Modal","_ref4","submit","onSubmit","htmlFor","autoComplete","type","onChange","pattern","_ref5","join","undefined","required","Canvas_Canvas","Boolean","window","location","hostname","match","ReactDOM","src_components_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2be56504.chunk.js","sourcesContent":["export const CANVAS_WIDTH = 500;\nexport const CANVAS_HEIGHT = 500;\n","import React, { Component, MouseEvent, RefObject } from \"react\";\nimport { CANVAS_WIDTH, CANVAS_HEIGHT } from \"../constants\";\n\nexport type OnMouseUp = (imageData: ImageData) => void;\n\ninterface CanvasProps {\n  imageData: ImageData;\n  onMouseUp: OnMouseUp;\n}\n\ninterface CanvasState {\n  drawing: boolean;\n}\n\nexport default class Canvas extends Component<CanvasProps, CanvasState> {\n  state = { drawing: false };\n\n  canvasRef: RefObject<HTMLCanvasElement> = React.createRef();\n\n  get currentCanvasRef() {\n    return (\n      this.canvasRef.current || {\n        width: 0,\n        height: 0,\n        offsetLeft: 0,\n        offsetTop: 0\n      }\n    );\n  }\n\n  shouldComponentUpdate({ imageData }: CanvasProps) {\n    return this.props.imageData !== imageData;\n  }\n\n  getCanvasContext = () =>\n    this.canvasRef.current && this.canvasRef.current.getContext(\"2d\");\n\n  handleMouseDown = ({ pageX, pageY }: MouseEvent<HTMLCanvasElement>) => {\n    const { offsetLeft, offsetTop } = this.currentCanvasRef;\n    const context = this.getCanvasContext();\n\n    if (context) {\n      this.setState({ drawing: true }, () => {\n        context.beginPath();\n        context.moveTo(pageX - offsetLeft, pageY - offsetTop);\n      });\n    }\n  };\n\n  handleMouseMove = ({ pageX, pageY }: MouseEvent<HTMLCanvasElement>) => {\n    if (this.state.drawing) {\n      const { offsetLeft, offsetTop } = this.currentCanvasRef;\n      const context = this.getCanvasContext();\n\n      if (context) {\n        context.lineTo(pageX - offsetLeft, pageY - offsetTop);\n        context.stroke();\n      }\n    }\n  };\n\n  handleMouseUp = () => {\n    this.setState({ drawing: false }, () => {\n      const context = this.getCanvasContext();\n\n      if (context) {\n        context.closePath();\n\n        this.props.onMouseUp(\n          context.getImageData(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT)\n        );\n      }\n    });\n  };\n\n  render() {\n    const context = this.getCanvasContext();\n\n    if (context) {\n      context.putImageData(this.props.imageData, 0, 0);\n    }\n\n    return (\n      <canvas\n        width={CANVAS_WIDTH}\n        height={CANVAS_HEIGHT}\n        ref={this.canvasRef}\n        onMouseDown={this.handleMouseDown}\n        onMouseMove={this.handleMouseMove}\n        onMouseUp={this.handleMouseUp}\n      />\n    );\n  }\n}\n","import React, { Component, ReactNode, KeyboardEventHandler } from \"react\";\nimport \"./Modal.css\";\n\nexport type CloseOpenModalFunction = (callback?: () => void) => void;\n\ninterface ModalRenderProps {\n  closeModal: CloseOpenModalFunction;\n  openModal: CloseOpenModalFunction;\n}\n\ninterface ModalProps {\n  children(childrenProps: ModalRenderProps): ReactNode;\n  render(renderProps: ModalRenderProps): ReactNode;\n}\n\ninterface ModalState {\n  open: boolean;\n}\n\nexport default class Modal extends Component<ModalProps, ModalState> {\n  state = { open: false };\n\n  componentDidMount() {\n    document.addEventListener(\"keyup\", this.handleKeyUp);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keyup\", this.handleKeyUp);\n  }\n\n  handleKeyUp = (ev: KeyboardEvent) => {\n    if (ev.key === \"Escape\") {\n      this.closeModal();\n    }\n  };\n\n  closeModal: CloseOpenModalFunction = () => {\n    this.setState({ open: false });\n  };\n\n  openModal: CloseOpenModalFunction = (callback?: () => void) => {\n    this.setState({ open: true }, callback);\n  };\n\n  render() {\n    const { closeModal, openModal } = this;\n\n    return (\n      <>\n        {this.props.render({ closeModal, openModal })}\n        {this.state.open && (\n          <div\n            className=\"ModalBackground\"\n            style={open ? {} : { display: \"none\" }}\n            onClick={() => this.closeModal()}\n          >\n            <div\n              className=\"Modal\"\n              onClick={event => {\n                event.stopPropagation();\n              }}\n            >\n              {this.props.children({ closeModal, openModal })}\n            </div>\n          </div>\n        )}\n      </>\n    );\n  }\n}\n","import React, { MouseEventHandler } from \"react\";\nimport classnames from \"classnames\";\nimport \"./PageListItem.css\";\n\ninterface PageListItemProps {\n  isActive: boolean;\n  label: string;\n  onClick: MouseEventHandler<HTMLButtonElement>;\n}\n\nexport default ({ isActive, label, onClick }: PageListItemProps) => (\n  <li className=\"PageListItem\">\n    <button\n      className={classnames(\"ItemButton\", isActive && \"ItemButtonActive\")}\n      onClick={onClick}\n      disabled={isActive}\n    >\n      {label}\n    </button>\n  </li>\n);\n","import React from \"react\";\nimport { Page } from \"../types\";\nimport PageListItem from \"./PageListItem\";\nimport \"./PageList.css\";\n\nexport default ({\n  activePageId,\n  onPageClick,\n  pages\n}: {\n  activePageId: number;\n  onPageClick(id: number): () => void;\n  pages: Page[];\n}) => (\n  <ul className=\"PageList\">\n    {pages.map(({ id, label }) => (\n      <PageListItem\n        key={id}\n        isActive={id === activePageId}\n        label={label}\n        onClick={onPageClick(id)}\n      />\n    ))}\n  </ul>\n);\n","import React, {\n  Component,\n  ChangeEvent,\n  EventHandler,\n  FormEventHandler,\n  KeyboardEventHandler,\n  RefObject\n} from \"react\";\nimport Canvas, { OnMouseUp } from \"./Canvas\";\nimport Modal, { CloseOpenModalFunction } from \"./Modal\";\nimport PageListItem from \"./PageListItem\";\nimport { CANVAS_WIDTH, CANVAS_HEIGHT } from \"../constants\";\nimport { Page } from \"../types\";\nimport \"./App.css\";\nimport PageList from \"./PageList\";\n\ninterface AppState {\n  activePageId?: number;\n  newPage: string;\n  pages: Page[];\n}\n\nclass App extends Component<{}, AppState> {\n  state: AppState = { newPage: \"\", pages: [] };\n\n  inputRef: RefObject<HTMLInputElement> = React.createRef();\n\n  handleChange = (\n    name: keyof AppState\n  ): EventHandler<ChangeEvent<HTMLInputElement>> => ({ target: { value } }) => {\n    this.setState(prevState => ({ ...prevState, [name]: value }));\n  };\n\n  handleMouseUp: OnMouseUp = imageData => {\n    this.setState(({ pages, ...prevState }) => {\n      if (typeof prevState.activePageId !== \"undefined\") {\n        const index = prevState.activePageId;\n\n        const newPage = {\n          ...pages[index],\n          imageData\n        };\n\n        // replace existing page with new image data\n        const newPages = [\n          ...pages.slice(0, index),\n          newPage,\n          ...pages.slice(index + 1)\n        ];\n\n        return { ...prevState, pages: newPages };\n      }\n\n      return { pages, ...prevState };\n    });\n  };\n\n  handleNewPageClick = (openModal: CloseOpenModalFunction) => () => {\n    openModal(() => {\n      if (this.inputRef.current) {\n        this.inputRef.current.focus();\n      }\n    });\n  };\n\n  handlePageClick = (id: number) => () => {\n    this.setState({ activePageId: id });\n  };\n\n  handleSubmit = (\n    closeModal: CloseOpenModalFunction\n  ): FormEventHandler<HTMLFormElement> => event => {\n    event.preventDefault();\n\n    this.setState(\n      state => {\n        const lastPage = state.pages[state.pages.length - 1];\n        const newPage = {\n          id: lastPage ? lastPage.id + 1 : 0,\n          imageData: new ImageData(CANVAS_WIDTH, CANVAS_HEIGHT),\n          label: state.newPage\n        };\n\n        return {\n          newPage: \"\",\n          pages: [...state.pages, newPage]\n        };\n      },\n      () => {\n        closeModal();\n        this.handlePageClick(this.state.pages.slice(-1)[0].id)();\n      }\n    );\n  };\n\n  render() {\n    return (\n      <>\n        <h1>Sketchbook</h1>\n        <div className=\"Container\">\n          <div className=\"outline\">\n            <div>\n              <Modal\n                render={({ openModal }) => (\n                  <button\n                    className=\"btn large primary\"\n                    onClick={this.handleNewPageClick(openModal)}\n                  >\n                    + New Page\n                  </button>\n                )}\n              >\n                {({ closeModal }) => {\n                  const submit = this.handleSubmit(closeModal);\n\n                  return (\n                    <form className=\"Form\" onSubmit={submit}>\n                      <label htmlFor=\"page-name\">Page Name:</label>\n                      <input\n                        autoComplete=\"off\"\n                        name=\"page-name\"\n                        id=\"page-name\"\n                        type=\"text\"\n                        value={this.state.newPage}\n                        onChange={this.handleChange(\"newPage\")}\n                        ref={this.inputRef}\n                        pattern={\n                          this.state.pages.length\n                            ? `^(?:(?!(^${this.state.pages\n                                .map(({ label }) => label)\n                                .join(\"$)|(^\")}$)).)*$`\n                            : undefined\n                        }\n                        required\n                      />\n                      <button className=\"large primary\" type=\"submit\">\n                        Create New Page\n                      </button>\n                    </form>\n                  );\n                }}\n              </Modal>\n            </div>\n            {typeof this.state.activePageId !== \"undefined\" && (\n              <div>\n                <PageList\n                  pages={this.state.pages}\n                  activePageId={this.state.activePageId}\n                  onPageClick={this.handlePageClick}\n                />\n              </div>\n            )}\n          </div>\n          {typeof this.state.activePageId !== \"undefined\" && (\n            <Canvas\n              imageData={this.state.pages[this.state.activePageId].imageData}\n              onMouseUp={this.handleMouseUp}\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}